name: CI/CD â€“ youtub-downloader

env:
  SERVER_DIR: "/root/youtub-downloader"
  DOCKER_IMAGE: "${{ secrets.DOCKERHUB_USERNAME }}/youtub-downloader"

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    name: Build & Push Docker (multi-arch)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (cross-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build & Push (amd64 + arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}

  deploy:
    name: Deploy to VPS (Debian)
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for compose/nginx files)
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      - name: Trust VPS host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t ed25519 ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure server dir exists
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.SERVER_DIR }}"

      - name: Upload .env (production)
        run: |
          echo "${{ vars.ENV_PROD_FILE }}" | tr -d '\r' | \
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "cat > ${{ env.SERVER_DIR }}/.env"

      - name: Upload docker-compose (prod)
        run: |
          scp docker-compose.prod.yml ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.SERVER_DIR }}/docker-compose.yml

      - name: Upload Nginx config
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${{ env.SERVER_DIR }}/nginx/conf.d"
          scp nginx/conf.d/default.conf ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ env.SERVER_DIR }}/nginx/conf.d/default.conf

      - name: Enable site & reload Nginx (Debian layout)
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -euo pipefail
          sudo mkdir -p /etc/nginx/sites-available /etc/nginx/sites-enabled
          # use a FILE (not a directory) for the vhost
          sudo cp ${{ env.SERVER_DIR }}/nginx/conf.d/default.conf /etc/nginx/sites-available/y-downloader.duckdns.org.conf
          sudo rm -f /etc/nginx/sites-enabled/y-downloader.duckdns.org.conf
          sudo ln -s /etc/nginx/sites-available/y-downloader.duckdns.org.conf /etc/nginx/sites-enabled/y-downloader.duckdns.org.conf
          sudo rm -f /etc/nginx/sites-enabled/default || true
          sudo nginx -t
          sudo systemctl reload nginx
          EOF

      - name: Pull & restart app
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
          set -euo pipefail
          cd ${{ env.SERVER_DIR }}
          docker compose --env-file .env down || true
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          docker compose --env-file .env up -d
          docker image prune -f
          EOF
